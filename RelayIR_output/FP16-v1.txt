type List[A] {
  Cons(A, List[A]),
  Nil,
}

type Option[A] {
  Some(A),
  None,
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

def @main(%idx: Tensor[(1, 128), int64] /* ty=Tensor[(1, 128), int64] */) -> Tensor[(1, 128, 128), float16] {
  %0 = cast(%idx, dtype="int32") /* ty=Tensor[(1, 128), int32] */;
  %1 = take(meta[relay.Constant][0] /* ty=Tensor[(128, 768), float16] */, %0, axis=0) /* ty=Tensor[(1, 128, 768), float16] */;
  %2 = add(%1, meta[relay.Constant][1] /* ty=Tensor[(1, 128, 768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %3 = nn.dropout(%2, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %4 = %3.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %5 = nn.layer_norm(%4, meta[relay.Constant][3] /* ty=Tensor[(768), float16] */, meta[relay.Constant][4] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %6 = broadcast_to(%5, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %7 = reshape(%6, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %8 = nn.batch_matmul(%7, meta[relay.Constant][5] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %9 = reshape(%8, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %10 = squeeze(%9, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %11 = add(%10, meta[relay.Constant][6] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %12 = reshape(%11, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %13 = transpose(%12, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %14 = broadcast_to(%13, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %15 = nn.batch_matmul(%7, meta[relay.Constant][7] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %16 = reshape(%15, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %17 = squeeze(%16, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %18 = add(%17, meta[relay.Constant][8] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %19 = reshape(%18, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %20 = transpose(%19, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %21 = transpose(%20, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %22 = broadcast_to(%21, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %23 = reshape(%14, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %24 = reshape(%22, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %25 = nn.batch_matmul(%23, %24, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %26 = reshape(%25, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %27 = squeeze(%26, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %28 = multiply(%27, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %29 = where(meta[relay.Constant][2] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %28) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %30 = nn.softmax(%29) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %31 = nn.dropout(%30, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %32 = %31.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %33 = broadcast_to(%32, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %34 = nn.batch_matmul(%7, meta[relay.Constant][9] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %35 = reshape(%34, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %36 = squeeze(%35, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %37 = add(%36, meta[relay.Constant][10] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %38 = reshape(%37, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %39 = transpose(%38, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %40 = broadcast_to(%39, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %41 = reshape(%33, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %42 = reshape(%40, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %43 = nn.batch_matmul(%41, %42, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %44 = reshape(%43, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %45 = squeeze(%44, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %46 = transpose(%45, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %47 = reshape(%46, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %48 = broadcast_to(%47, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %49 = reshape(%48, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %50 = nn.batch_matmul(%49, meta[relay.Constant][11] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %51 = reshape(%50, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %52 = squeeze(%51, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %53 = add(%52, meta[relay.Constant][12] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %54 = nn.dropout(%53, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %55 = %54.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %56 = add(%4, %55) /* ty=Tensor[(1, 128, 768), float16] */;
  %57 = nn.layer_norm(%56, meta[relay.Constant][13] /* ty=Tensor[(768), float16] */, meta[relay.Constant][14] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %58 = broadcast_to(%57, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %59 = reshape(%58, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %60 = nn.batch_matmul(%59, meta[relay.Constant][15] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %61 = reshape(%60, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %62 = squeeze(%61, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %63 = add(%62, meta[relay.Constant][16] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %64 = multiply(%63, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %66 = erf(%65) /* ty=Tensor[(1, 128, 3072), float32] */;
  %67 = multiply(%66, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %68 = cast(%63, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %69 = add(0.5f /* ty=float32 */, %67) /* ty=Tensor[(1, 128, 3072), float32] */;
  %70 = multiply(%68, %69) /* ty=Tensor[(1, 128, 3072), float32] */;
  %71 = broadcast_to(%70, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %72 = reshape(%71, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %73 = cast(%72, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %74 = nn.batch_matmul(%73, meta[relay.Constant][17] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %75 = reshape(%74, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %76 = squeeze(%75, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %77 = add(%76, meta[relay.Constant][18] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %78 = nn.dropout(%77, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %79 = %78.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %80 = add(%56, %79) /* ty=Tensor[(1, 128, 768), float16] */;
  %81 = nn.layer_norm(%80, meta[relay.Constant][20] /* ty=Tensor[(768), float16] */, meta[relay.Constant][21] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %82 = broadcast_to(%81, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %83 = reshape(%82, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %84 = nn.batch_matmul(%83, meta[relay.Constant][22] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %85 = reshape(%84, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %86 = squeeze(%85, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %87 = add(%86, meta[relay.Constant][23] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %88 = reshape(%87, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %89 = transpose(%88, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %90 = broadcast_to(%89, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %91 = nn.batch_matmul(%83, meta[relay.Constant][24] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %92 = reshape(%91, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %93 = squeeze(%92, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %94 = add(%93, meta[relay.Constant][25] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %95 = reshape(%94, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %96 = transpose(%95, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %97 = transpose(%96, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %98 = broadcast_to(%97, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %99 = reshape(%90, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %100 = reshape(%98, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %101 = nn.batch_matmul(%99, %100, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %102 = reshape(%101, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %103 = squeeze(%102, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %104 = multiply(%103, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %105 = where(meta[relay.Constant][19] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %104) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %106 = nn.softmax(%105) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %107 = nn.dropout(%106, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %108 = %107.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %109 = broadcast_to(%108, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %110 = nn.batch_matmul(%83, meta[relay.Constant][26] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %111 = reshape(%110, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %112 = squeeze(%111, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %113 = add(%112, meta[relay.Constant][27] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %114 = reshape(%113, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %115 = transpose(%114, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %116 = broadcast_to(%115, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %117 = reshape(%109, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %118 = reshape(%116, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %119 = nn.batch_matmul(%117, %118, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %120 = reshape(%119, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %121 = squeeze(%120, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %122 = transpose(%121, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %123 = reshape(%122, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %124 = broadcast_to(%123, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %125 = reshape(%124, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %126 = nn.batch_matmul(%125, meta[relay.Constant][28] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %127 = reshape(%126, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %128 = squeeze(%127, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %129 = add(%128, meta[relay.Constant][29] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %130 = nn.dropout(%129, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %131 = %130.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %132 = add(%80, %131) /* ty=Tensor[(1, 128, 768), float16] */;
  %133 = nn.layer_norm(%132, meta[relay.Constant][30] /* ty=Tensor[(768), float16] */, meta[relay.Constant][31] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %134 = broadcast_to(%133, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %135 = reshape(%134, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %136 = nn.batch_matmul(%135, meta[relay.Constant][32] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %137 = reshape(%136, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %138 = squeeze(%137, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %139 = add(%138, meta[relay.Constant][33] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %140 = multiply(%139, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %142 = erf(%141) /* ty=Tensor[(1, 128, 3072), float32] */;
  %143 = multiply(%142, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %144 = cast(%139, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %145 = add(0.5f /* ty=float32 */, %143) /* ty=Tensor[(1, 128, 3072), float32] */;
  %146 = multiply(%144, %145) /* ty=Tensor[(1, 128, 3072), float32] */;
  %147 = broadcast_to(%146, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %148 = reshape(%147, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %149 = cast(%148, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %150 = nn.batch_matmul(%149, meta[relay.Constant][34] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %151 = reshape(%150, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %152 = squeeze(%151, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %153 = add(%152, meta[relay.Constant][35] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %154 = nn.dropout(%153, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %155 = %154.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %156 = add(%132, %155) /* ty=Tensor[(1, 128, 768), float16] */;
  %157 = nn.layer_norm(%156, meta[relay.Constant][37] /* ty=Tensor[(768), float16] */, meta[relay.Constant][38] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %158 = broadcast_to(%157, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %159 = reshape(%158, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %160 = nn.batch_matmul(%159, meta[relay.Constant][39] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %161 = reshape(%160, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %162 = squeeze(%161, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %163 = add(%162, meta[relay.Constant][40] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %164 = reshape(%163, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %165 = transpose(%164, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %166 = broadcast_to(%165, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %167 = nn.batch_matmul(%159, meta[relay.Constant][41] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %168 = reshape(%167, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %169 = squeeze(%168, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %170 = add(%169, meta[relay.Constant][42] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %171 = reshape(%170, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %172 = transpose(%171, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %173 = transpose(%172, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %174 = broadcast_to(%173, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %175 = reshape(%166, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %176 = reshape(%174, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %177 = nn.batch_matmul(%175, %176, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %178 = reshape(%177, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %179 = squeeze(%178, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %180 = multiply(%179, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %181 = where(meta[relay.Constant][36] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %180) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %182 = nn.softmax(%181) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %183 = nn.dropout(%182, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %184 = %183.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %185 = broadcast_to(%184, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %186 = nn.batch_matmul(%159, meta[relay.Constant][43] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %187 = reshape(%186, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %188 = squeeze(%187, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %189 = add(%188, meta[relay.Constant][44] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %190 = reshape(%189, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %191 = transpose(%190, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %192 = broadcast_to(%191, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %193 = reshape(%185, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %194 = reshape(%192, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %195 = nn.batch_matmul(%193, %194, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %196 = reshape(%195, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %197 = squeeze(%196, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %198 = transpose(%197, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %199 = reshape(%198, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %200 = broadcast_to(%199, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %201 = reshape(%200, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %202 = nn.batch_matmul(%201, meta[relay.Constant][45] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %203 = reshape(%202, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %204 = squeeze(%203, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %205 = add(%204, meta[relay.Constant][46] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %206 = nn.dropout(%205, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %207 = %206.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %208 = add(%156, %207) /* ty=Tensor[(1, 128, 768), float16] */;
  %209 = nn.layer_norm(%208, meta[relay.Constant][47] /* ty=Tensor[(768), float16] */, meta[relay.Constant][48] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %210 = broadcast_to(%209, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %211 = reshape(%210, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %212 = nn.batch_matmul(%211, meta[relay.Constant][49] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %213 = reshape(%212, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %214 = squeeze(%213, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %215 = add(%214, meta[relay.Constant][50] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %216 = multiply(%215, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %218 = erf(%217) /* ty=Tensor[(1, 128, 3072), float32] */;
  %219 = multiply(%218, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %220 = cast(%215, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %221 = add(0.5f /* ty=float32 */, %219) /* ty=Tensor[(1, 128, 3072), float32] */;
  %222 = multiply(%220, %221) /* ty=Tensor[(1, 128, 3072), float32] */;
  %223 = broadcast_to(%222, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %224 = reshape(%223, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %225 = cast(%224, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %226 = nn.batch_matmul(%225, meta[relay.Constant][51] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %227 = reshape(%226, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %228 = squeeze(%227, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %229 = add(%228, meta[relay.Constant][52] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %230 = nn.dropout(%229, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %231 = %230.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %232 = add(%208, %231) /* ty=Tensor[(1, 128, 768), float16] */;
  %233 = nn.layer_norm(%232, meta[relay.Constant][54] /* ty=Tensor[(768), float16] */, meta[relay.Constant][55] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %234 = broadcast_to(%233, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %235 = reshape(%234, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %236 = nn.batch_matmul(%235, meta[relay.Constant][56] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %237 = reshape(%236, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %238 = squeeze(%237, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %239 = add(%238, meta[relay.Constant][57] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %240 = reshape(%239, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %241 = transpose(%240, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %242 = broadcast_to(%241, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %243 = nn.batch_matmul(%235, meta[relay.Constant][58] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %244 = reshape(%243, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %245 = squeeze(%244, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %246 = add(%245, meta[relay.Constant][59] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %247 = reshape(%246, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %248 = transpose(%247, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %249 = transpose(%248, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %250 = broadcast_to(%249, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %251 = reshape(%242, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %252 = reshape(%250, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %253 = nn.batch_matmul(%251, %252, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %254 = reshape(%253, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %255 = squeeze(%254, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %256 = multiply(%255, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %257 = where(meta[relay.Constant][53] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %256) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %258 = nn.softmax(%257) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %259 = nn.dropout(%258, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %260 = %259.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %261 = broadcast_to(%260, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %262 = nn.batch_matmul(%235, meta[relay.Constant][60] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %263 = reshape(%262, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %264 = squeeze(%263, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %265 = add(%264, meta[relay.Constant][61] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %266 = reshape(%265, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %267 = transpose(%266, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %268 = broadcast_to(%267, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %269 = reshape(%261, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %270 = reshape(%268, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %271 = nn.batch_matmul(%269, %270, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %272 = reshape(%271, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %273 = squeeze(%272, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %274 = transpose(%273, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %275 = reshape(%274, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %276 = broadcast_to(%275, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %277 = reshape(%276, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %278 = nn.batch_matmul(%277, meta[relay.Constant][62] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %279 = reshape(%278, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %280 = squeeze(%279, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %281 = add(%280, meta[relay.Constant][63] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %282 = nn.dropout(%281, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %283 = %282.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %284 = add(%232, %283) /* ty=Tensor[(1, 128, 768), float16] */;
  %285 = nn.layer_norm(%284, meta[relay.Constant][64] /* ty=Tensor[(768), float16] */, meta[relay.Constant][65] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %286 = broadcast_to(%285, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %287 = reshape(%286, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %288 = nn.batch_matmul(%287, meta[relay.Constant][66] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %289 = reshape(%288, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %290 = squeeze(%289, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %291 = add(%290, meta[relay.Constant][67] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %292 = multiply(%291, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %293 = cast(%292, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %294 = erf(%293) /* ty=Tensor[(1, 128, 3072), float32] */;
  %295 = multiply(%294, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %296 = cast(%291, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %297 = add(0.5f /* ty=float32 */, %295) /* ty=Tensor[(1, 128, 3072), float32] */;
  %298 = multiply(%296, %297) /* ty=Tensor[(1, 128, 3072), float32] */;
  %299 = broadcast_to(%298, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %300 = reshape(%299, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %301 = cast(%300, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %302 = nn.batch_matmul(%301, meta[relay.Constant][68] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %303 = reshape(%302, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %304 = squeeze(%303, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %305 = add(%304, meta[relay.Constant][69] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %306 = nn.dropout(%305, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %307 = %306.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %308 = add(%284, %307) /* ty=Tensor[(1, 128, 768), float16] */;
  %309 = nn.layer_norm(%308, meta[relay.Constant][71] /* ty=Tensor[(768), float16] */, meta[relay.Constant][72] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %310 = broadcast_to(%309, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %311 = reshape(%310, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %312 = nn.batch_matmul(%311, meta[relay.Constant][73] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %313 = reshape(%312, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %314 = squeeze(%313, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %315 = add(%314, meta[relay.Constant][74] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %316 = reshape(%315, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %317 = transpose(%316, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %318 = broadcast_to(%317, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %319 = nn.batch_matmul(%311, meta[relay.Constant][75] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %320 = reshape(%319, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %321 = squeeze(%320, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %322 = add(%321, meta[relay.Constant][76] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %323 = reshape(%322, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %324 = transpose(%323, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %325 = transpose(%324, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %326 = broadcast_to(%325, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %327 = reshape(%318, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %328 = reshape(%326, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %329 = nn.batch_matmul(%327, %328, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %330 = reshape(%329, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %331 = squeeze(%330, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %332 = multiply(%331, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %333 = where(meta[relay.Constant][70] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %332) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %334 = nn.softmax(%333) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %335 = nn.dropout(%334, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %336 = %335.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %337 = broadcast_to(%336, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %338 = nn.batch_matmul(%311, meta[relay.Constant][77] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %339 = reshape(%338, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %340 = squeeze(%339, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %341 = add(%340, meta[relay.Constant][78] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %342 = reshape(%341, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %343 = transpose(%342, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %344 = broadcast_to(%343, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %345 = reshape(%337, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %346 = reshape(%344, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %347 = nn.batch_matmul(%345, %346, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %348 = reshape(%347, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %349 = squeeze(%348, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %350 = transpose(%349, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %351 = reshape(%350, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %352 = broadcast_to(%351, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %353 = reshape(%352, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %354 = nn.batch_matmul(%353, meta[relay.Constant][79] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %355 = reshape(%354, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %356 = squeeze(%355, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %357 = add(%356, meta[relay.Constant][80] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %358 = nn.dropout(%357, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %359 = %358.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %360 = add(%308, %359) /* ty=Tensor[(1, 128, 768), float16] */;
  %361 = nn.layer_norm(%360, meta[relay.Constant][81] /* ty=Tensor[(768), float16] */, meta[relay.Constant][82] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %362 = broadcast_to(%361, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %363 = reshape(%362, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %364 = nn.batch_matmul(%363, meta[relay.Constant][83] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %365 = reshape(%364, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %366 = squeeze(%365, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %367 = add(%366, meta[relay.Constant][84] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %368 = multiply(%367, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %369 = cast(%368, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %370 = erf(%369) /* ty=Tensor[(1, 128, 3072), float32] */;
  %371 = multiply(%370, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %372 = cast(%367, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %373 = add(0.5f /* ty=float32 */, %371) /* ty=Tensor[(1, 128, 3072), float32] */;
  %374 = multiply(%372, %373) /* ty=Tensor[(1, 128, 3072), float32] */;
  %375 = broadcast_to(%374, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %376 = reshape(%375, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %377 = cast(%376, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %378 = nn.batch_matmul(%377, meta[relay.Constant][85] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %379 = reshape(%378, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %380 = squeeze(%379, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %381 = add(%380, meta[relay.Constant][86] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %382 = nn.dropout(%381, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %383 = %382.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %384 = add(%360, %383) /* ty=Tensor[(1, 128, 768), float16] */;
  %385 = nn.layer_norm(%384, meta[relay.Constant][88] /* ty=Tensor[(768), float16] */, meta[relay.Constant][89] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %386 = broadcast_to(%385, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %387 = reshape(%386, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %388 = nn.batch_matmul(%387, meta[relay.Constant][90] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %389 = reshape(%388, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %390 = squeeze(%389, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %391 = add(%390, meta[relay.Constant][91] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %392 = reshape(%391, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %393 = transpose(%392, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %394 = broadcast_to(%393, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %395 = nn.batch_matmul(%387, meta[relay.Constant][92] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %396 = reshape(%395, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %397 = squeeze(%396, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %398 = add(%397, meta[relay.Constant][93] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %399 = reshape(%398, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %400 = transpose(%399, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %401 = transpose(%400, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %402 = broadcast_to(%401, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %403 = reshape(%394, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %404 = reshape(%402, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %405 = nn.batch_matmul(%403, %404, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %406 = reshape(%405, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %407 = squeeze(%406, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %408 = multiply(%407, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %409 = where(meta[relay.Constant][87] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %408) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %410 = nn.softmax(%409) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %411 = nn.dropout(%410, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %412 = %411.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %413 = broadcast_to(%412, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %414 = nn.batch_matmul(%387, meta[relay.Constant][94] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %415 = reshape(%414, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %416 = squeeze(%415, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %417 = add(%416, meta[relay.Constant][95] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %418 = reshape(%417, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %419 = transpose(%418, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %420 = broadcast_to(%419, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %421 = reshape(%413, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %422 = reshape(%420, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %423 = nn.batch_matmul(%421, %422, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %424 = reshape(%423, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %425 = squeeze(%424, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %426 = transpose(%425, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %427 = reshape(%426, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %428 = broadcast_to(%427, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %429 = reshape(%428, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %430 = nn.batch_matmul(%429, meta[relay.Constant][96] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %431 = reshape(%430, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %432 = squeeze(%431, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %433 = add(%432, meta[relay.Constant][97] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %434 = nn.dropout(%433, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %435 = %434.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %436 = add(%384, %435) /* ty=Tensor[(1, 128, 768), float16] */;
  %437 = nn.layer_norm(%436, meta[relay.Constant][98] /* ty=Tensor[(768), float16] */, meta[relay.Constant][99] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %438 = broadcast_to(%437, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %439 = reshape(%438, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %440 = nn.batch_matmul(%439, meta[relay.Constant][100] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %441 = reshape(%440, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %442 = squeeze(%441, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %443 = add(%442, meta[relay.Constant][101] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %444 = multiply(%443, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %446 = erf(%445) /* ty=Tensor[(1, 128, 3072), float32] */;
  %447 = multiply(%446, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %448 = cast(%443, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %449 = add(0.5f /* ty=float32 */, %447) /* ty=Tensor[(1, 128, 3072), float32] */;
  %450 = multiply(%448, %449) /* ty=Tensor[(1, 128, 3072), float32] */;
  %451 = broadcast_to(%450, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %452 = reshape(%451, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %453 = cast(%452, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %454 = nn.batch_matmul(%453, meta[relay.Constant][102] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %455 = reshape(%454, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %456 = squeeze(%455, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %457 = add(%456, meta[relay.Constant][103] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %458 = nn.dropout(%457, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %459 = %458.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %460 = add(%436, %459) /* ty=Tensor[(1, 128, 768), float16] */;
  %461 = nn.layer_norm(%460, meta[relay.Constant][105] /* ty=Tensor[(768), float16] */, meta[relay.Constant][106] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %462 = broadcast_to(%461, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %463 = reshape(%462, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %464 = nn.batch_matmul(%463, meta[relay.Constant][107] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %465 = reshape(%464, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %466 = squeeze(%465, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %467 = add(%466, meta[relay.Constant][108] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %468 = reshape(%467, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %469 = transpose(%468, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %470 = broadcast_to(%469, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %471 = nn.batch_matmul(%463, meta[relay.Constant][109] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %472 = reshape(%471, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %473 = squeeze(%472, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %474 = add(%473, meta[relay.Constant][110] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %475 = reshape(%474, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %476 = transpose(%475, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %477 = transpose(%476, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %478 = broadcast_to(%477, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %479 = reshape(%470, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %480 = reshape(%478, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %481 = nn.batch_matmul(%479, %480, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %482 = reshape(%481, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %483 = squeeze(%482, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %484 = multiply(%483, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %485 = where(meta[relay.Constant][104] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %484) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %486 = nn.softmax(%485) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %487 = nn.dropout(%486, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %488 = %487.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %489 = broadcast_to(%488, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %490 = nn.batch_matmul(%463, meta[relay.Constant][111] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %491 = reshape(%490, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %492 = squeeze(%491, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %493 = add(%492, meta[relay.Constant][112] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %494 = reshape(%493, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %495 = transpose(%494, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %496 = broadcast_to(%495, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %497 = reshape(%489, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %498 = reshape(%496, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %499 = nn.batch_matmul(%497, %498, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %500 = reshape(%499, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %501 = squeeze(%500, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %502 = transpose(%501, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %503 = reshape(%502, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %504 = broadcast_to(%503, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %505 = reshape(%504, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %506 = nn.batch_matmul(%505, meta[relay.Constant][113] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %507 = reshape(%506, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %508 = squeeze(%507, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %509 = add(%508, meta[relay.Constant][114] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %510 = nn.dropout(%509, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %511 = %510.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %512 = add(%460, %511) /* ty=Tensor[(1, 128, 768), float16] */;
  %513 = nn.layer_norm(%512, meta[relay.Constant][115] /* ty=Tensor[(768), float16] */, meta[relay.Constant][116] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %514 = broadcast_to(%513, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %515 = reshape(%514, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %516 = nn.batch_matmul(%515, meta[relay.Constant][117] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %517 = reshape(%516, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %518 = squeeze(%517, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %519 = add(%518, meta[relay.Constant][118] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %520 = multiply(%519, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %521 = cast(%520, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %522 = erf(%521) /* ty=Tensor[(1, 128, 3072), float32] */;
  %523 = multiply(%522, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %524 = cast(%519, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %525 = add(0.5f /* ty=float32 */, %523) /* ty=Tensor[(1, 128, 3072), float32] */;
  %526 = multiply(%524, %525) /* ty=Tensor[(1, 128, 3072), float32] */;
  %527 = broadcast_to(%526, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %528 = reshape(%527, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %529 = cast(%528, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %530 = nn.batch_matmul(%529, meta[relay.Constant][119] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %531 = reshape(%530, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %532 = squeeze(%531, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %533 = add(%532, meta[relay.Constant][120] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %534 = nn.dropout(%533, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %535 = %534.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %536 = add(%512, %535) /* ty=Tensor[(1, 128, 768), float16] */;
  %537 = nn.layer_norm(%536, meta[relay.Constant][122] /* ty=Tensor[(768), float16] */, meta[relay.Constant][123] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %538 = broadcast_to(%537, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %539 = reshape(%538, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %540 = nn.batch_matmul(%539, meta[relay.Constant][124] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %541 = reshape(%540, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %542 = squeeze(%541, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %543 = add(%542, meta[relay.Constant][125] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %544 = reshape(%543, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %545 = transpose(%544, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %546 = broadcast_to(%545, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %547 = nn.batch_matmul(%539, meta[relay.Constant][126] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %548 = reshape(%547, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %549 = squeeze(%548, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %550 = add(%549, meta[relay.Constant][127] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %551 = reshape(%550, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %552 = transpose(%551, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %553 = transpose(%552, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %554 = broadcast_to(%553, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %555 = reshape(%546, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %556 = reshape(%554, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %557 = nn.batch_matmul(%555, %556, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %558 = reshape(%557, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %559 = squeeze(%558, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %560 = multiply(%559, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %561 = where(meta[relay.Constant][121] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %560) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %562 = nn.softmax(%561) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %563 = nn.dropout(%562, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %564 = %563.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %565 = broadcast_to(%564, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %566 = nn.batch_matmul(%539, meta[relay.Constant][128] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %567 = reshape(%566, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %568 = squeeze(%567, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %569 = add(%568, meta[relay.Constant][129] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %570 = reshape(%569, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %571 = transpose(%570, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %572 = broadcast_to(%571, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %573 = reshape(%565, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %574 = reshape(%572, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %575 = nn.batch_matmul(%573, %574, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %576 = reshape(%575, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %577 = squeeze(%576, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %578 = transpose(%577, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %579 = reshape(%578, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %580 = broadcast_to(%579, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %581 = reshape(%580, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %582 = nn.batch_matmul(%581, meta[relay.Constant][130] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %583 = reshape(%582, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %584 = squeeze(%583, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %585 = add(%584, meta[relay.Constant][131] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %586 = nn.dropout(%585, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %587 = %586.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %588 = add(%536, %587) /* ty=Tensor[(1, 128, 768), float16] */;
  %589 = nn.layer_norm(%588, meta[relay.Constant][132] /* ty=Tensor[(768), float16] */, meta[relay.Constant][133] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %590 = broadcast_to(%589, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %591 = reshape(%590, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %592 = nn.batch_matmul(%591, meta[relay.Constant][134] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %593 = reshape(%592, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %594 = squeeze(%593, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %595 = add(%594, meta[relay.Constant][135] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %596 = multiply(%595, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %597 = cast(%596, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %598 = erf(%597) /* ty=Tensor[(1, 128, 3072), float32] */;
  %599 = multiply(%598, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %600 = cast(%595, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %601 = add(0.5f /* ty=float32 */, %599) /* ty=Tensor[(1, 128, 3072), float32] */;
  %602 = multiply(%600, %601) /* ty=Tensor[(1, 128, 3072), float32] */;
  %603 = broadcast_to(%602, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %604 = reshape(%603, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %605 = cast(%604, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %606 = nn.batch_matmul(%605, meta[relay.Constant][136] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %607 = reshape(%606, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %608 = squeeze(%607, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %609 = add(%608, meta[relay.Constant][137] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %610 = nn.dropout(%609, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %611 = %610.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %612 = add(%588, %611) /* ty=Tensor[(1, 128, 768), float16] */;
  %613 = nn.layer_norm(%612, meta[relay.Constant][139] /* ty=Tensor[(768), float16] */, meta[relay.Constant][140] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %614 = broadcast_to(%613, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %615 = reshape(%614, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %616 = nn.batch_matmul(%615, meta[relay.Constant][141] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %617 = reshape(%616, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %618 = squeeze(%617, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %619 = add(%618, meta[relay.Constant][142] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %620 = reshape(%619, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %621 = transpose(%620, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %622 = broadcast_to(%621, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %623 = nn.batch_matmul(%615, meta[relay.Constant][143] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %624 = reshape(%623, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %625 = squeeze(%624, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %626 = add(%625, meta[relay.Constant][144] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %627 = reshape(%626, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %628 = transpose(%627, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %629 = transpose(%628, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %630 = broadcast_to(%629, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %631 = reshape(%622, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %632 = reshape(%630, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %633 = nn.batch_matmul(%631, %632, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %634 = reshape(%633, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %635 = squeeze(%634, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %636 = multiply(%635, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %637 = where(meta[relay.Constant][138] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %636) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %638 = nn.softmax(%637) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %639 = nn.dropout(%638, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %640 = %639.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %641 = broadcast_to(%640, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %642 = nn.batch_matmul(%615, meta[relay.Constant][145] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %643 = reshape(%642, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %644 = squeeze(%643, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %645 = add(%644, meta[relay.Constant][146] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %646 = reshape(%645, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %647 = transpose(%646, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %648 = broadcast_to(%647, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %649 = reshape(%641, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %650 = reshape(%648, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %651 = nn.batch_matmul(%649, %650, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %652 = reshape(%651, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %653 = squeeze(%652, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %654 = transpose(%653, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %655 = reshape(%654, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %656 = broadcast_to(%655, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %657 = reshape(%656, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %658 = nn.batch_matmul(%657, meta[relay.Constant][147] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %659 = reshape(%658, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %660 = squeeze(%659, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %661 = add(%660, meta[relay.Constant][148] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %662 = nn.dropout(%661, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %663 = %662.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %664 = add(%612, %663) /* ty=Tensor[(1, 128, 768), float16] */;
  %665 = nn.layer_norm(%664, meta[relay.Constant][149] /* ty=Tensor[(768), float16] */, meta[relay.Constant][150] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %666 = broadcast_to(%665, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %667 = reshape(%666, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %668 = nn.batch_matmul(%667, meta[relay.Constant][151] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %669 = reshape(%668, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %670 = squeeze(%669, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %671 = add(%670, meta[relay.Constant][152] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %672 = multiply(%671, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %673 = cast(%672, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %674 = erf(%673) /* ty=Tensor[(1, 128, 3072), float32] */;
  %675 = multiply(%674, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %676 = cast(%671, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %677 = add(0.5f /* ty=float32 */, %675) /* ty=Tensor[(1, 128, 3072), float32] */;
  %678 = multiply(%676, %677) /* ty=Tensor[(1, 128, 3072), float32] */;
  %679 = broadcast_to(%678, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %680 = reshape(%679, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %681 = cast(%680, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %682 = nn.batch_matmul(%681, meta[relay.Constant][153] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %683 = reshape(%682, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %684 = squeeze(%683, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %685 = add(%684, meta[relay.Constant][154] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %686 = nn.dropout(%685, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %687 = %686.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %688 = add(%664, %687) /* ty=Tensor[(1, 128, 768), float16] */;
  %689 = nn.layer_norm(%688, meta[relay.Constant][156] /* ty=Tensor[(768), float16] */, meta[relay.Constant][157] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %690 = broadcast_to(%689, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %691 = reshape(%690, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %692 = nn.batch_matmul(%691, meta[relay.Constant][158] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %693 = reshape(%692, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %694 = squeeze(%693, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %695 = add(%694, meta[relay.Constant][159] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %696 = reshape(%695, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %697 = transpose(%696, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %698 = broadcast_to(%697, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %699 = nn.batch_matmul(%691, meta[relay.Constant][160] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %700 = reshape(%699, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %701 = squeeze(%700, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %702 = add(%701, meta[relay.Constant][161] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %703 = reshape(%702, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %704 = transpose(%703, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %705 = transpose(%704, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %706 = broadcast_to(%705, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %707 = reshape(%698, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %708 = reshape(%706, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %709 = nn.batch_matmul(%707, %708, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %710 = reshape(%709, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %711 = squeeze(%710, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %712 = multiply(%711, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %713 = where(meta[relay.Constant][155] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %712) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %714 = nn.softmax(%713) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %715 = nn.dropout(%714, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %716 = %715.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %717 = broadcast_to(%716, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %718 = nn.batch_matmul(%691, meta[relay.Constant][162] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %719 = reshape(%718, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %720 = squeeze(%719, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %721 = add(%720, meta[relay.Constant][163] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %722 = reshape(%721, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %723 = transpose(%722, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %724 = broadcast_to(%723, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %725 = reshape(%717, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %726 = reshape(%724, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %727 = nn.batch_matmul(%725, %726, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %728 = reshape(%727, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %729 = squeeze(%728, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %730 = transpose(%729, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %731 = reshape(%730, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %732 = broadcast_to(%731, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %733 = reshape(%732, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %734 = nn.batch_matmul(%733, meta[relay.Constant][164] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %735 = reshape(%734, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %736 = squeeze(%735, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %737 = add(%736, meta[relay.Constant][165] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %738 = nn.dropout(%737, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %739 = %738.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %740 = add(%688, %739) /* ty=Tensor[(1, 128, 768), float16] */;
  %741 = nn.layer_norm(%740, meta[relay.Constant][166] /* ty=Tensor[(768), float16] */, meta[relay.Constant][167] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %742 = broadcast_to(%741, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %743 = reshape(%742, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %744 = nn.batch_matmul(%743, meta[relay.Constant][168] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %745 = reshape(%744, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %746 = squeeze(%745, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %747 = add(%746, meta[relay.Constant][169] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %748 = multiply(%747, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %749 = cast(%748, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %750 = erf(%749) /* ty=Tensor[(1, 128, 3072), float32] */;
  %751 = multiply(%750, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %752 = cast(%747, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %753 = add(0.5f /* ty=float32 */, %751) /* ty=Tensor[(1, 128, 3072), float32] */;
  %754 = multiply(%752, %753) /* ty=Tensor[(1, 128, 3072), float32] */;
  %755 = broadcast_to(%754, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %756 = reshape(%755, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %757 = cast(%756, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %758 = nn.batch_matmul(%757, meta[relay.Constant][170] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %759 = reshape(%758, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %760 = squeeze(%759, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %761 = add(%760, meta[relay.Constant][171] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %762 = nn.dropout(%761, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %763 = %762.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %764 = add(%740, %763) /* ty=Tensor[(1, 128, 768), float16] */;
  %765 = nn.layer_norm(%764, meta[relay.Constant][173] /* ty=Tensor[(768), float16] */, meta[relay.Constant][174] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %766 = broadcast_to(%765, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %767 = reshape(%766, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %768 = nn.batch_matmul(%767, meta[relay.Constant][175] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %769 = reshape(%768, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %770 = squeeze(%769, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %771 = add(%770, meta[relay.Constant][176] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %772 = reshape(%771, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %773 = transpose(%772, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %774 = broadcast_to(%773, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %775 = nn.batch_matmul(%767, meta[relay.Constant][177] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %776 = reshape(%775, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %777 = squeeze(%776, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %778 = add(%777, meta[relay.Constant][178] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %779 = reshape(%778, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %780 = transpose(%779, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %781 = transpose(%780, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %782 = broadcast_to(%781, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %783 = reshape(%774, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %784 = reshape(%782, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %785 = nn.batch_matmul(%783, %784, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %786 = reshape(%785, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %787 = squeeze(%786, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %788 = multiply(%787, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %789 = where(meta[relay.Constant][172] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %788) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %790 = nn.softmax(%789) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %791 = nn.dropout(%790, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %792 = %791.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %793 = broadcast_to(%792, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %794 = nn.batch_matmul(%767, meta[relay.Constant][179] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %795 = reshape(%794, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %796 = squeeze(%795, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %797 = add(%796, meta[relay.Constant][180] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %798 = reshape(%797, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %799 = transpose(%798, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %800 = broadcast_to(%799, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %801 = reshape(%793, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %802 = reshape(%800, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %803 = nn.batch_matmul(%801, %802, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %804 = reshape(%803, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %805 = squeeze(%804, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %806 = transpose(%805, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %807 = reshape(%806, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %808 = broadcast_to(%807, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %809 = reshape(%808, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %810 = nn.batch_matmul(%809, meta[relay.Constant][181] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %811 = reshape(%810, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %812 = squeeze(%811, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %813 = add(%812, meta[relay.Constant][182] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %814 = nn.dropout(%813, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %815 = %814.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %816 = add(%764, %815) /* ty=Tensor[(1, 128, 768), float16] */;
  %817 = nn.layer_norm(%816, meta[relay.Constant][183] /* ty=Tensor[(768), float16] */, meta[relay.Constant][184] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %818 = broadcast_to(%817, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %819 = reshape(%818, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %820 = nn.batch_matmul(%819, meta[relay.Constant][185] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %821 = reshape(%820, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %822 = squeeze(%821, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %823 = add(%822, meta[relay.Constant][186] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %824 = multiply(%823, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %825 = cast(%824, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %826 = erf(%825) /* ty=Tensor[(1, 128, 3072), float32] */;
  %827 = multiply(%826, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %828 = cast(%823, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %829 = add(0.5f /* ty=float32 */, %827) /* ty=Tensor[(1, 128, 3072), float32] */;
  %830 = multiply(%828, %829) /* ty=Tensor[(1, 128, 3072), float32] */;
  %831 = broadcast_to(%830, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %832 = reshape(%831, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %833 = cast(%832, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %834 = nn.batch_matmul(%833, meta[relay.Constant][187] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %835 = reshape(%834, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %836 = squeeze(%835, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %837 = add(%836, meta[relay.Constant][188] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %838 = nn.dropout(%837, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %839 = %838.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %840 = add(%816, %839) /* ty=Tensor[(1, 128, 768), float16] */;
  %841 = nn.layer_norm(%840, meta[relay.Constant][190] /* ty=Tensor[(768), float16] */, meta[relay.Constant][191] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %842 = broadcast_to(%841, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %843 = reshape(%842, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %844 = nn.batch_matmul(%843, meta[relay.Constant][192] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %845 = reshape(%844, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %846 = squeeze(%845, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %847 = add(%846, meta[relay.Constant][193] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %848 = reshape(%847, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %849 = transpose(%848, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %850 = broadcast_to(%849, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %851 = nn.batch_matmul(%843, meta[relay.Constant][194] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %852 = reshape(%851, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %853 = squeeze(%852, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %854 = add(%853, meta[relay.Constant][195] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %855 = reshape(%854, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %856 = transpose(%855, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %857 = transpose(%856, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %858 = broadcast_to(%857, shape=[1, 12, 64, 128], dtype="float16") /* ty=Tensor[(1, 12, 64, 128), float16] */;
  %859 = reshape(%850, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %860 = reshape(%858, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float16] */;
  %861 = nn.batch_matmul(%859, %860, out_dtype="float16") /* ty=Tensor[(12, 128, 128), float16] */;
  %862 = reshape(%861, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %863 = squeeze(%862, axis=[]) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %864 = multiply(%863, 0.125f16 /* ty=float16 */) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %865 = where(meta[relay.Constant][189] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff16 /* ty=float16 */, %864) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %866 = nn.softmax(%865) /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %867 = nn.dropout(%866, rate=0.1f) /* ty=(Tensor[(1, 12, 128, 128), float16], Tensor[(1, 12, 128, 128), float16]) */;
  %868 = %867.0 /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %869 = broadcast_to(%868, shape=[1, 12, 128, 128], dtype="float16") /* ty=Tensor[(1, 12, 128, 128), float16] */;
  %870 = nn.batch_matmul(%843, meta[relay.Constant][196] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %871 = reshape(%870, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %872 = squeeze(%871, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %873 = add(%872, meta[relay.Constant][197] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %874 = reshape(%873, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %875 = transpose(%874, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %876 = broadcast_to(%875, shape=[1, 12, 128, 64], dtype="float16") /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %877 = reshape(%869, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float16] */;
  %878 = reshape(%876, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float16] */;
  %879 = nn.batch_matmul(%877, %878, out_dtype="float16") /* ty=Tensor[(12, 128, 64), float16] */;
  %880 = reshape(%879, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %881 = squeeze(%880, axis=[]) /* ty=Tensor[(1, 12, 128, 64), float16] */;
  %882 = transpose(%881, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float16] */;
  %883 = reshape(%882, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %884 = broadcast_to(%883, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %885 = reshape(%884, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %886 = nn.batch_matmul(%885, meta[relay.Constant][198] /* ty=Tensor[(1, 768, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %887 = reshape(%886, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %888 = squeeze(%887, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %889 = add(%888, meta[relay.Constant][199] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %890 = nn.dropout(%889, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %891 = %890.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %892 = add(%840, %891) /* ty=Tensor[(1, 128, 768), float16] */;
  %893 = nn.layer_norm(%892, meta[relay.Constant][200] /* ty=Tensor[(768), float16] */, meta[relay.Constant][201] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %894 = broadcast_to(%893, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %895 = reshape(%894, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %896 = nn.batch_matmul(%895, meta[relay.Constant][202] /* ty=Tensor[(1, 768, 3072), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %897 = reshape(%896, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %898 = squeeze(%897, axis=[]) /* ty=Tensor[(1, 128, 3072), float16] */;
  %899 = add(%898, meta[relay.Constant][203] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %900 = multiply(%899, 0.707031f16 /* ty=float16 */) /* ty=Tensor[(1, 128, 3072), float16] */;
  %901 = cast(%900, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %902 = erf(%901) /* ty=Tensor[(1, 128, 3072), float32] */;
  %903 = multiply(%902, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %904 = cast(%899, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %905 = add(0.5f /* ty=float32 */, %903) /* ty=Tensor[(1, 128, 3072), float32] */;
  %906 = multiply(%904, %905) /* ty=Tensor[(1, 128, 3072), float32] */;
  %907 = broadcast_to(%906, shape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %908 = reshape(%907, newshape=[-1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %909 = cast(%908, dtype="float16") /* ty=Tensor[(1, 128, 3072), float16] */;
  %910 = nn.batch_matmul(%909, meta[relay.Constant][204] /* ty=Tensor[(1, 3072, 768), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %911 = reshape(%910, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %912 = squeeze(%911, axis=[]) /* ty=Tensor[(1, 128, 768), float16] */;
  %913 = add(%912, meta[relay.Constant][205] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %914 = nn.dropout(%913, rate=0.1f) /* ty=(Tensor[(1, 128, 768), float16], Tensor[(1, 128, 768), float16]) */;
  %915 = %914.0 /* ty=Tensor[(1, 128, 768), float16] */;
  %916 = add(%892, %915) /* ty=Tensor[(1, 128, 768), float16] */;
  %917 = nn.layer_norm(%916, meta[relay.Constant][206] /* ty=Tensor[(768), float16] */, meta[relay.Constant][207] /* ty=Tensor[(768), float16] */) /* ty=Tensor[(1, 128, 768), float16] */;
  %918 = broadcast_to(%917, shape=[1, 128, 768], dtype="float16") /* ty=Tensor[(1, 128, 768), float16] */;
  %919 = reshape(%918, newshape=[-1, 128, 768]) /* ty=Tensor[(1, 128, 768), float16] */;
  %920 = nn.batch_matmul(%919, meta[relay.Constant][208] /* ty=Tensor[(1, 768, 128), float16] */, out_dtype="float16") /* ty=Tensor[(1, 128, 128), float16] */;
  %921 = reshape(%920, newshape=[1, 128, 128]) /* ty=Tensor[(1, 128, 128), float16] */;
  squeeze(%921, axis=[]) /* ty=Tensor[(1, 128, 128), float16] */
}

